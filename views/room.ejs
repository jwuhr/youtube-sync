<% include ./partials/header %>

<div id="roomTitle" class="ui main text container center aligned">
    <h2 class="ui header" id="roomName"><%= roomName %></h2>
</div>

<div class="ui three centered column grid">
    <div class="ten wide column">
        <form id="url">
            <input type="text" id="youtubeURL" placeholder="Enter YouTube link">
            <input type="submit">
        </form>
        <div class="videoWrapper">
            <!-- TODO -->
            <!-- src="https://www.youtube.com/embed/?autoplay=1&enablejsapi=1&playsupported=true&mute=1&origin=https://youtube-syncer-app.herokuapp.com" -->
            <!-- <iframe id="player" type="text/html"
                src="https://www.youtube.com/embed/?autoplay=1&enablejsapi=1&playsupported=true"
                allow="autoplay; fullscreen" allowfullscreen frameborder="0"></iframe> -->
                <div id="player"></div>
        </div>
    </div>
    <div class="four wide column">
        <ul class="pages">
            <li class="chat page">
                <div class="chatArea">
                    <ul class="messages"></ul>
                </div>
                <input class="inputMessage" placeholder="Type here..." />
            </li>
            <li class="login page">
                <div class="form">
                    <h3 class="title">What's your username?</h3>
                    <input class="usernameInput" type="text" maxlength="14" />
                </div>
            </li>
        </ul>
    </div>
</div>

<!-- jQuery CDN -->
<script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
<script src="/js/main.js"></script>
<script src="/socket.io/socket.io.js"></script>

<script>
    var roomArray = document.getElementById("roomName").innerHTML.split(":")
    var roomName = roomArray[roomArray.length-1];
    var socket = io({
        query: {
            roomName: roomName
        }
    });
    var expected = 'unstarted';

    $(function () {
        $('#url').submit(function (e) {
            e.preventDefault(); // prevents page reloading
            console.log($('#youtubeURL').val())
            socket.emit('newVideo', $('#youtubeURL').val(), roomName);
            $('#youtubeURL').val('');
            return false;
        });
    });

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            playerVars: {
                autoplay: 1,
                playsupported: true,
                mute: 0,
                fs: 1,
                rel: 0,
                origin: 'https://youtube-syncer-app.herokuapp.com'
            },
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });

    };

    

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        console.log("ready")
        $("iframe").attr("src", "https://www.youtube.com/embed/?autoplay=1&enablejsapi=1&playsupported=true&mute=1&origin=https://youtube-syncer-app.herokuapp.com")
        socket.on('playPlayer', function () {
            expected = 'play';
            playVideo();
        });

        socket.on('pausePlayer', function () {
            expected = 'pause';
            pauseVideo();
        });

        socket.on('bufferingPlayer', function (time) {
            player.seekTo(time, true);
        });

        socket.on('newVideo', function (id) {
            player.loadVideoById(id, 0);
        });

        socket.on('newUser', function () {
            socket.emit('requestCurrentVideo');
        });
    };

    function emitState(playerStatus) {
        if (playerStatus == 0) {
            socket.emit('end', roomName); // ended = yellow
        } else if (playerStatus == 1 && expected != 'play') {
            socket.emit('play', roomName); // playing = green
        } else if (playerStatus == 2 && expected != 'pause') {
            socket.emit('pause', roomName); // paused = red
        } else if (playerStatus == 3) {
            socket.emit('buffering', player.getCurrentTime(), roomName); // buffering = purple
        } else if (playerStatus == 5) {
            socket.emit('status5')
        } else if (playerStatus == -1) {
            socket.emit('statusminus1')
        }
    };

    function onPlayerStateChange(event) {
        emitState(event.data);
    };

    function stopVideo() {
        player.stopVideo();
    };

    function pauseVideo() {
        player.pauseVideo();
    };

    function playVideo() {
        player.playVideo();
    }

//---------------------------------------------------

</script>

<% include ./partials/footer %>